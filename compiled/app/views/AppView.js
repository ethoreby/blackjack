// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <span class="playerScore"></span> <span class="dealerScore"></span><br/> <span class="chips"></span> <button class="bet10k">Bet 10,000</button> <button class="bet50k">Bet 50,000</button> <button class="bet100k">Bet 100,000</button> <span class="pot"></span> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div>');

    AppView.prototype.events = {
      "click .hit-button": function() {
        return this.model.get('playerHand').hit();
      },
      "click .stand-button": function() {
        return this.model.get('playerHand').stand();
      },
      "click .bet10k": function() {
        return this.model.bet(10000);
      },
      "click .bet50k": function() {
        return this.model.bet(50000);
      },
      "click .bet100k": function() {
        return this.model.bet(100000);
      }
    };

    AppView.prototype.initialize = function() {
      this.render();
      return this.model.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.chips').html('Chips: ' + this.model.attributes.chips);
      this.$('.pot').html('Pot: ' + this.model.attributes.pot);
      this.$('.playerScore').html('Player Score: ' + this.model.attributes.playerScore);
      this.$('.dealerScore').html('Dealer Score: ' + this.model.attributes.dealerScore);
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      return this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.map
