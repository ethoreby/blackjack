// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      this.setBet = __bind(this.setBet, this);
      this.gameover = __bind(this.gameover, this);
      this.bet = __bind(this.bet, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.set('playerScore', 0);
      this.set('dealerScore', 0);
      this.set('chips', 1000000);
      this.set('pot', 0);
      return this.setListeners();
    };

    App.prototype.bet = function(raise) {
      var currChips;
      currChips = this.get('chips');
      raise = raise || currChips;
      if (currChips - raise >= 0) {
        this.set('pot', this.get('pot') + raise);
        return this.set('chips', currChips - raise);
      }
    };

    App.prototype.gameover = function(playerVictory) {
      if (playerVictory === null) {
        this.set('chips', this.get('chips') + this.get('pot'));
        alert('tie');
      } else if (playerVictory === true) {
        this.set('playerScore', this.get('playerScore') + 1);
        this.set('chips', this.get('chips') + this.get('pot') * 2);
        alert('player wins!');
      } else {
        this.set('dealerScore', this.get('dealerScore') + 1);
        alert('player loses!');
      }
      if (this.get('chips') === 0) {
        return $(".bankrupt").css("display", "block");
      } else {
        this.newGame();
        return this.setListeners();
      }
    };

    App.prototype.newGame = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      return this.set('pot', 0);
    };

    App.prototype.setListeners = function() {
      this.get('playerHand').on('stand', (function(_this) {
        return function() {
          var dealer, playerHand;
          playerHand = _this.get('playerHand');
          dealer = _this.get('dealerHand');
          return dealer.play(playerHand.scores()[0]);
        };
      })(this));
      this.get('playerHand').on('bust', (function(_this) {
        return function() {
          return _this.gameover(false);
        };
      })(this));
      this.get('dealerHand').on('bust', (function(_this) {
        return function() {
          return _this.gameover(true);
        };
      })(this));
      this.get('dealerHand').on('win', (function(_this) {
        return function() {
          return _this.gameover(true);
        };
      })(this));
      this.get('dealerHand').on('loss', (function(_this) {
        return function() {
          return _this.gameover(false);
        };
      })(this));
      return this.get('dealerHand').on('tie', (function(_this) {
        return function() {
          return _this.gameover(null);
        };
      })(this));
    };

    App.prototype.setBet = function() {
      var player;
      this.get('playerHand').at(0).flip();
      this.get('playerHand').at(1).flip();
      player = this.get('playerHand');
      return player.set('startGame', true);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
